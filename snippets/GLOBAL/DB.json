{
  "$DB::get_driver_instance": {
    "prefix": "$DB::get_driver_instance",
    "body": "\\$DB::get_driver_instance(${1:\\$type}, ${2:\\$library}${3:, ${4:\\$external}});",
    "description": "Loads and returns a database instance with the specified type and library. The loaded class is within lib/dml directory and of the form: $type.'_'.$library.'_moodle_database'."
  },
  "$DB->driver_installed": {
    "prefix": "$DB->driver_installed",
    "body": "\\$DB->driver_installed();",
    "description": "Detects if all needed PHP stuff are installed for DB connectivity. Can be used before connect()"
  },
  "$DB->get_prefix": {
    "prefix": "$DB->get_prefix",
    "body": "\\$DB->get_prefix();",
    "description": "Returns database table prefix can be used before connect()."
  },
  "$DB->get_dbvendor": {
    "prefix": "$DB->get_dbvendor",
    "body": "\\$DB->get_dbvendor();",
    "description": "Returns the database vendor. Can be used before connect()."
  },
  "$DB->get_dbfamily": {
    "prefix": "$DB->get_dbfamily",
    "body": "\\$DB->get_dbfamily();",
    "description": "Returns the database family type. (This sort of describes the SQL 'dialect') can be used before connect()."
  },
  "$DB->get_name": {
    "prefix": "$DB->get_name",
    "body": "\\$DB->get_name();",
    "description": "Returns the localised database type name can be used before connect()."
  },
  "$DB->get_configuration_help": {
    "prefix": "$DB->get_configuration_help",
    "body": "\\$DB->get_configuration_help();",
    "description": "Returns the localised database configuration help. Can be used before connect()."
  },
  "$DB->get_configuration_hints": {
    "prefix": "$DB->get_configuration_hints",
    "body": "\\$DB->get_configuration_hints();",
    "description": "DEPRECATED SINCE 2.6. Returns the localised database description can be used before connect()."
  },
  "$DB->export_dbconfig": {
    "prefix": "$DB->export_dbconfig",
    "body": "\\$DB->export_dbconfig();",
    "description": "Returns the db related part of config.php"
  },
  "$DB->diagnose": {
    "prefix": "$DB->diagnose",
    "body": "\\$DB->diagnose();",
    "description": "Diagnose database and tables, this function is used to verify database and driver settings, db engine types, etc."
  },
  "$DB->connect": {
    "prefix": "$DB->connect",
    "body": "\\$DB->connect(${1:\\$dbhost}, ${2:\\$dbuser}, ${3:\\$dbpass}, ${4:\\$dbname}, ${5:\\$prefix}${6:, ${7:\\$dboptions_array}});",
    "description": "Connects to the database. Must be called before other methods."
  },
  "$DB->create_database": {
    "prefix": "$DB->create_database",
    "body": "\\$DB->create_database(${1:\\$dbhost}, ${2:\\$dbuser}, ${3:\\$dbpass}, ${4:\\$dbname}${5:, ${6:\\$dboptions_array}});",
    "description": "Attempt to create the database."
  },
  "$DB->get_transaction_start_backtrace": {
    "prefix": "$DB->get_transaction_start_backtrace",
    "body": "\\$DB->get_transaction_start_backtrace();",
    "description": "Returns transaction trace for debugging purposes. @private to be used by core only"
  },
  "$DB->dispose": {
    "prefix": "$DB->dispose",
    "body": "\\$DB->dispose();",
    "description": "Closes the database connection and releases all resources and memory (especially circular memory references). Do NOT use connect() again, create a new instance if needed."
  },
  "$DB->query_log": {
    "prefix": "$DB->query_log",
    "body": "\\$DB->query_log(${1:\\$error});",
    "description": "This logs the last query based on 'logall', 'logslow' and 'logerrors' options configured via $CFG->dboptions ."
  },
  "$DB->get_server_info": {
    "prefix": "$DB->get_server_info",
    "body": "\\$DB->get_server_info();",
    "description": "Returns database server info array"
  },
  "$DB->get_last_error": {
    "prefix": "$DB->get_last_error",
    "body": "\\$DB->get_last_error();",
    "description": "Returns the last error reported by the database engine."
  },
  "$DB->get_in_or_equal": {
    "prefix": "$DB->get_in_or_equal",
    "body": "\\$DB->get_in_or_equal(${1:\\$items}${2:, ${3|SQL_PARAMS_QM,SQL_PARAMS_NAMED|}${4:, ${5:\\$prefix}${6:, ${7:\\$equal}${8:, ${9:\\$onemptyitems}}}}});",
    "description": "Constructs 'IN()' or '=' sql fragment"
  },
  "$DB->fix_sql_params": {
    "prefix": "$DB->fix_sql_params",
    "body": "\\$DB->fix_sql_params(${1:\\$sql}${2:, ${3:\\$params_array}});",
    "description": "Normalizes sql query parameters and verifies parameters."
  },
  "$DB->get_tables": {
    "prefix": "$DB->get_tables",
    "body": "\\$DB->get_tables(${1:\\$usecache});",
    "description": "Return tables in database WITHOUT current prefix."
  },
  "$DB->get_indexes": {
    "prefix": "$DB->get_indexes",
    "body": "\\$DB->get_indexes(${1:\\$table});",
    "description": "Return table indexes - everything lowercased."
  },
  "$DB->get_columns": {
    "prefix": "$DB->get_columns",
    "body": "\\$DB->get_columns(${1:\\$table}${2:, ${3:\\$usecache}});",
    "description": "Returns detailed information about columns in table. This information is cached internally."
  },
  "$DB->reset_caches": {
    "prefix": "$DB->reset_caches",
    "body": "\\$DB->reset_caches(${1:\\$tablenames});",
    "description": "Resets the internal column details cache"
  },
  "$DB->get_manager": {
    "prefix": "$DB->get_manager",
    "body": "\\$DB->get_manager();",
    "description": "Returns the sql generator used for db manipulation. Used mostly in upgrade.php scripts."
  },
  "$DB->change_db_encoding": {
    "prefix": "$DB->change_db_encoding",
    "body": "\\$DB->change_db_encoding();",
    "description": "Attempts to change db encoding to UTF-8 encoding if possible."
  },
  "$DB->setup_is_unicodedb": {
    "prefix": "$DB->setup_is_unicodedb",
    "body": "\\$DB->setup_is_unicodedb();",
    "description": "Checks to see if the database is in unicode mode?"
  },
  "$DB->set_debug": {
    "prefix": "$DB->set_debug",
    "body": "\\$DB->set_debug(${1:\\$state});",
    "description": "Enable/disable very detailed debugging."
  },
  "$DB->get_debug": {
    "prefix": "$DB->get_debug",
    "body": "\\$DB->get_debug();",
    "description": "Returns debug status"
  },
  "$DB->set_logging": {
    "prefix": "$DB->set_logging",
    "body": "\\$DB->set_logging(${1:\\$state});",
    "description": "DEPRECATED SINCE MOODLE 2.9. Enable/disable detailed sql logging"
  },
  "$DB->change_database_structure": {
    "prefix": "$DB->change_database_structure",
    "body": "\\$DB->change_database_structure(${1:\\$sql}${2:, ${3:\\$tablenames}});",
    "description": "Do NOT use in code, this is for use by database_manager only!"
  },
  "$DB->execute": {
    "prefix": "$DB->execute",
    "body": "\\$DB->execute(${1:\\$sql}${2:, ${3:\\$params_array}});",
    "description": "Executes a general sql query. Should be used only when no other method suitable. Do NOT use this to make changes in db structure, use database_manager methods instead!"
  },
  "$DB->get_recordset": {
    "prefix": "$DB->get_recordset",
    "body": "\\$DB->get_recordset(${1:\\$table}${2:, ${3:\\$conditions_array}${4:, ${5:\\$sort}${6:, ${7:\\$fields}${8:, ${9:\\$limitfrom}${10:, ${11:\\$limitnum}}}}}});",
    "description": "Get a number of records as a moodle_recordset where all the given conditions met."
  },
  "$DB->get_recordset_list": {
    "prefix": "$DB->get_recordset_list",
    "body": "\\$DB->get_recordset_list(${1:\\$table}, ${2:\\$field}, ${3:\\$values_array}${4:, ${5:\\$sort}${6:, ${7:\\$fields}${8:, ${9:\\$limitfrom}${10:, ${11:\\$limitnum}}}}});",
    "description": "Get a number of records as a moodle_recordset where one field match one list of values."
  },
  "$DB->get_recordset_select": {
    "prefix": "$DB->get_recordset_select",
    "body": "\\$DB->get_recordset_select(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}${5:, ${6:\\$sort}${7:, ${8:\\$fields}${9:, ${10:\\$limitfrom}${11:, ${12:\\$limitnum}}}}}});",
    "description": "Get a number of records as a moodle_recordset which match a particular WHERE clause."
  },
  "$DB->get_recordset_sql": {
    "prefix": "$DB->get_recordset_sql",
    "body": "\\$DB->get_recordset_sql(${1:\\$sql}${2:, ${3:\\$params_array}${4:, ${5:\\$limitfrom}${6:, ${7:\\$limitnum}}}});",
    "description": "Get a number of records as a moodle_recordset using a SQL statement."
  },
  "$DB->export_table_recordset": {
    "prefix": "$DB->export_table_recordset",
    "body": "\\$DB->export_table_recordset(${1:\\$table});",
    "description": "Get all records from a table."
  },
  "$DB->get_records": {
    "prefix": ["$DB->get_records", "$DBgrs"],
    "body": "\\$DB->get_records(${1:\\$table}${2:, ${3:\\$conditions_array}${4:, ${5:\\$sort}${6:, ${7:\\$fields}${8:, ${9:\\$limitfrom}${10:, ${11:\\$limitnum}}}}}});",
    "description": "Get a number of records as an array of objects where all the given conditions met."
  },
  "$DB->get_records_list": {
    "prefix": "$DB->get_records_list",
    "body": "\\$DB->get_records_list(${1:\\$table}, ${2:\\$field}, ${3:\\$values_array}${4:, ${5:\\$sort}${6:, ${7:\\$fields}${8:, ${9:\\$limitfrom}${10:, ${11:\\$limitnum}}}}});",
    "description": "Get a number of records as an array of objects where one field match one list of values."
  },
  "$DB->get_records_select": {
    "prefix": "$DB->get_records_select",
    "body": "\\$DB->get_records_select(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}${5:, ${6:\\$sort}${7:, ${8:\\$fields}${9:, ${10:\\$limitfrom}${11:, ${12:\\$limitnum}}}}}});",
    "description": "Get a number of records as an array of objects which match a particular WHERE clause."
  },
  "$DB->get_records_sql": {
    "prefix": "$DB->get_records_sql",
    "body": "\\$DB->get_records_sql(${1:\\$sql}${2:, ${3:\\$params_array}${4:, ${5:\\$limitfrom}${6:, ${7:\\$limitnum}}}});",
    "description": "Get a number of records as an array of objects using a SQL statement."
  },
  "$DB->get_records_menu": {
    "prefix": "$DB->get_records_menu",
    "body": "\\$DB->get_records_menu(${1:\\$table}${2:, ${3:\\$conditions_array}${4:, ${5:\\$sort}${6:, ${7:\\$fields}${8:, ${9:\\$limitfrom}${10:, ${11:\\$limitnum}}}}}});",
    "description": "Get the first two columns from a number of records as an associative array where all the given conditions met."
  },
  "$DB->get_records_select_menu": {
    "prefix": "$DB->get_records_select_menu",
    "body": "\\$DB->get_records_select_menu(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}${5:, ${6:\\$sort}${7:, ${8:\\$fields}${9:, ${10:\\$limitfrom}${11:, ${12:\\$limitnum}}}}}});",
    "description": "Get the first two columns from a number of records as an associative array which match a particular WHERE clause."
  },
  "$DB->get_records_sql_menu": {
    "prefix": "$DB->get_records_sql_menu",
    "body": "\\$DB->get_records_sql_menu(${1:\\$sql}${2:, ${3:\\$params_array}${4:, ${5:\\$limitfrom}${6:, ${7:\\$limitnum}}}});",
    "description": "Get the first two columns from a number of records as an associative array using a SQL statement."
  },
  "$DB->get_record": {
    "prefix": ["$DB->get_record", "$DBgr"],
    "body": "\\$DB->get_record(${1:\\$table}, ${2:\\$conditions_array}${3:, ${4:\\$fields}${5:, ${6|IGNORE_MISSING,IGNORE_MULTIPLE,MUST_EXIST|}}});",
    "description": "Get a single database record as an object where all the given conditions met."
  },
  "$DB->get_record_select": {
    "prefix": "$DB->get_record_select",
    "body": "\\$DB->get_record_select(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}${5:, ${6:\\$fields}${7:, ${8|IGNORE_MISSING,IGNORE_MULTIPLE,MUST_EXIST|}}}});",
    "description": "Get a single database record as an object which match a particular WHERE clause."
  },
  "$DB->get_record_sql": {
    "prefix": "$DB->get_record_sql",
    "body": "\\$DB->get_record_sql(${1:\\$sql}${2:, ${3:\\$params_array}${4:, ${5|IGNORE_MISSING,IGNORE_MULTIPLE,MUST_EXIST|}}});",
    "description": "Get a single database record as an object using a SQL statement."
  },
  "$DB->get_field": {
    "prefix": "$DB->get_field",
    "body": "\\$DB->get_field(${1:\\$table}, ${2:\\$return}, ${3:\\$conditions_array}${4:, ${5|IGNORE_MISSING,IGNORE_MULTIPLE,MUST_EXIST|}});",
    "description": "Get a single field value from a table record where all the given conditions met."
  },
  "$DB->get_field_select": {
    "prefix": "$DB->get_field_select",
    "body": "\\$DB->get_field_select(${1:\\$table}, ${2:\\$return}, ${3:\\$select}${4:, ${5:\\$params_array}${6:, ${7|IGNORE_MISSING,IGNORE_MULTIPLE,MUST_EXIST|}}});",
    "description": "Get a single field value from a table record which match a particular WHERE clause."
  },
  "$DB->get_field_sql": {
    "prefix": "$DB->get_field_sql",
    "body": "\\$DB->get_field_sql(${1:\\$sql}${2:, ${3:\\$params_array}${4:, ${5|IGNORE_MISSING,IGNORE_MULTIPLE,MUST_EXIST|}}});",
    "description": "Get a single field value (first field) using a SQL statement."
  },
  "$DB->get_fieldset_select": {
    "prefix": "$DB->get_fieldset_select",
    "body": "\\$DB->get_fieldset_select(${1:\\$table}, ${2:\\$return}, ${3:\\$select}${4:, ${5:\\$params_array}});",
    "description": "Selects records and return values of chosen field as an array which match a particular WHERE clause."
  },
  "$DB->get_fieldset_sql": {
    "prefix": "$DB->get_fieldset_sql",
    "body": "\\$DB->get_fieldset_sql(${1:\\$sql}${2:, ${3:\\$params_array}});",
    "description": "Selects records and return values (first field) as an array using a SQL statement."
  },
  "$DB->insert_record_raw": {
    "prefix": "$DB->insert_record_raw",
    "body": "\\$DB->insert_record_raw(${1:\\$table}, ${2:\\$params}${3:, ${4:\\$returnid}${5:, ${6:\\$bulk}${7:, ${8:\\$customsequence}}}});",
    "description": "Insert new record into database, as fast as possible, no safety checks, lobs not supported."
  },
  "$DB->insert_record": {
    "prefix": ["$DB->insert_record", "$DBir"],
    "body": "\\$DB->insert_record(${1:\\$table}, ${2:\\$dataobject}${3:, ${4:\\$returnid}${5:, ${6:\\$bulk}}});",
    "description": "Insert a record into a table and return the \"id\" field if required."
  },
  "$DB->insert_records": {
    "prefix": ["$DB->insert_records", "$DBirs"],
    "body": "\\$DB->insert_records(${1:\\$table}, ${2:\\$dataobjects});",
    "description": "Insert multiple records into database as fast as possible."
  },
  "$DB->import_record": {
    "prefix": "$DB->import_record",
    "body": "\\$DB->import_record(${1:\\$table}, ${2:\\$dataobject});",
    "description": "Import a record into a table, id field is required. Safety checks are NOT carried out. Lobs are supported."
  },
  "$DB->update_record_raw": {
    "prefix": "$DB->update_record_raw",
    "body": "\\$DB->update_record_raw(${1:\\$table}, ${2:\\$params}${3:, ${4:\\$bulk}});",
    "description": "Update record in database, as fast as possible, no safety checks, lobs not supported."
  },
  "$DB->update_record": {
    "prefix": ["$DB->update_record", "$DBur"],
    "body": "\\$DB->update_record(${1:\\$table}, ${2:\\$dataobject}${3:, ${4:\\$bulk}});",
    "description": "Update a record in a table"
  },
  "$DB->set_field": {
    "prefix": "$DB->set_field",
    "body": "\\$DB->set_field(${1:\\$table}, ${2:\\$newfield}, ${3:\\$newvalue}${4:, ${5:\\$conditions_array}});",
    "description": "Set a single field in every table record where all the given conditions met."
  },
  "$DB->set_field_select": {
    "prefix": "$DB->set_field_select",
    "body": "\\$DB->set_field_select(${1:\\$table}, ${2:\\$newfield}, ${3:\\$newvalue}, ${4:\\$select}${5:, ${6:\\$params_array}});",
    "description": "Set a single field in every table record which match a particular WHERE clause."
  },
  "$DB->count_records": {
    "prefix": ["$DB->count_records", "$DBcr"],
    "body": "\\$DB->count_records(${1:\\$table}${2:, ${3:\\$conditions_array}});",
    "description": "Count the records in a table where all the given conditions met."
  },
  "$DB->count_records_select": {
    "prefix": "$DB->count_records_select",
    "body": "\\$DB->count_records_select(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}${5:, ${6:\\$countitem}}});",
    "description": "Count the records in a table which match a particular WHERE clause."
  },
  "$DB->count_records_sql": {
    "prefix": "$DB->count_records_sql",
    "body": "\\$DB->count_records_sql(${1:\\$sql}${2:, ${3:\\$params_array}});",
    "description": "Get the result of a SQL SELECT COUNT(...) query."
  },
  "$DB->record_exists": {
    "prefix": ["$DB->record_exists", "$DBre"],
    "body": "\\$DB->record_exists(${1:\\$table}, ${2:\\$conditions_array});",
    "description": "Test whether a record exists in a table where all the given conditions met."
  },
  "$DB->record_exists_select": {
    "prefix": "$DB->record_exists_select",
    "body": "\\$DB->record_exists_select(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}});",
    "description": "Test whether any records exists in a table which match a particular WHERE clause."
  },
  "$DB->record_exists_sql": {
    "prefix": "$DB->record_exists_sql",
    "body": "\\$DB->record_exists_sql(${1:\\$sql}${2:, ${3:\\$params_array}});",
    "description": "Test whether a SQL SELECT statement returns any records."
  },
  "$DB->delete_records": {
    "prefix": ["$DB->delete_records", "$DBdrs"],
    "body": "\\$DB->delete_records(${1:\\$table}${2:, ${3:\\$conditions_array}});",
    "description": "Delete the records from a table where all the given conditions met. If conditions not specified, table is truncated."
  },
  "$DB->delete_records_list": {
    "prefix": "$DB->delete_records_list",
    "body": "\\$DB->delete_records_list(${1:\\$table}, ${2:\\$field}, ${3:\\$values_array});",
    "description": "Delete the records from a table where one field match one list of values."
  },
  "$DB->delete_records_select": {
    "prefix": "$DB->delete_records_select",
    "body": "\\$DB->delete_records_select(${1:\\$table}, ${2:\\$select}${3:, ${4:\\$params_array}});",
    "description": "Delete one or more records from a table which match a particular WHERE clause."
  },
  "$DB->sql_null_from_clause": {
    "prefix": "$DB->sql_null_from_clause",
    "body": "\\$DB->sql_null_from_clause();",
    "description": "Returns the FROM clause required by some DBs in all SELECT statements."
  },
  "$DB->sql_bitand": {
    "prefix": "$DB->sql_bitand",
    "body": "\\$DB->sql_bitand(${1:\\$int1}, ${2:\\$int2});",
    "description": "Returns the SQL text to be used in order to perform one bitwise AND operation between 2 integers."
  },
  "$DB->sql_bitnot": {
    "prefix": "$DB->sql_bitnot",
    "body": "\\$DB->sql_bitnot(${1:\\$int1});",
    "description": "Returns the SQL text to be used in order to perform one bitwise NOT operation with 1 integer."
  },
  "$DB->sql_bitor": {
    "prefix": "$DB->sql_bitor",
    "body": "\\$DB->sql_bitor(${1:\\$int1}, ${2:\\$int2});",
    "description": "Returns the SQL text to be used in order to perform one bitwise OR operation between 2 integers."
  },
  "$DB->sql_bitxor": {
    "prefix": "$DB->sql_bitxor",
    "body": "\\$DB->sql_bitxor(${1:\\$int1}, ${2:\\$int2});",
    "description": "Returns the SQL text to be used in order to perform one bitwise XOR operation between 2 integers."
  },
  "$DB->sql_modulo": {
    "prefix": "$DB->sql_modulo",
    "body": "\\$DB->sql_modulo(${1:\\$int1}, ${2:\\$int2});",
    "description": "Returns the SQL text to be used in order to perform module '%' operation - remainder after division."
  },
  "$DB->sql_ceil": {
    "prefix": "$DB->sql_ceil",
    "body": "\\$DB->sql_ceil(${1:\\$fieldname});",
    "description": "Returns the cross db correct CEIL (ceiling) expression applied to fieldname. Most DBs use CEIL(), hence it's the default here."
  },
  "$DB->sql_cast_char2int": {
    "prefix": "$DB->sql_cast_char2int",
    "body": "\\$DB->sql_cast_char2int(${1:\\$fieldname}${2:, ${3:\\$text}});",
    "description": "Returns the SQL to be used in order to CAST one CHAR column to INTEGER."
  },
  "$DB->sql_cast_char2real": {
    "prefix": "$DB->sql_cast_char2real",
    "body": "\\$DB->sql_cast_char2real(${1:\\$fieldname}${2:, ${3:\\$text}});",
    "description": "Returns the SQL to be used in order to CAST one CHAR column to REAL number."
  },
  "$DB->sql_cast_2signed": {
    "prefix": "$DB->sql_cast_2signed",
    "body": "\\$DB->sql_cast_2signed(${1:\\$fieldname});",
    "description": "DEPRECATED SINCE 2.3. Returns the SQL to be used in order to an UNSIGNED INTEGER column to SIGNED."
  },
  "$DB->sql_compare_text": {
    "prefix": "$DB->sql_compare_text",
    "body": "\\$DB->sql_compare_text(${1:\\$fieldname}${2:, ${3:\\$numchars}});",
    "description": "Returns the SQL text to be used to compare one TEXT (clob) column with one varchar column, because some RDBMS doesn't support such direct comparisons."
  },
  "$DB->sql_equal": {
    "prefix": "$DB->sql_equal",
    "body": "\\$DB->sql_equal(${1:\\$fieldname}, ${2:\\$param}${3:, ${4:\\$casesensitive}${5:, ${6:\\$accentsensitive}${7:, ${8:\\$notequal}}}});",
    "description": "Returns an equal (=) or not equal (<>) part of a query."
  },
  "$DB->sql_like": {
    "prefix": "$DB->sql_like",
    "body": "\\$DB->sql_like(${1:\\$fieldname}, ${2:\\$param}${3:, ${4:\\$casesensitive}${5:, ${6:\\$accentsensitive}${7:, ${8:\\$notlike}${9:, ${10:\\$escapechar}}}}});",
    "description": "Returns 'LIKE' part of a query."
  },
  "$DB->sql_like_escape": {
    "prefix": "$DB->sql_like_escape",
    "body": "\\$DB->sql_like_escape(${1:\\$text}${2:, ${3:\\$escapechar}});",
    "description": "Escape sql LIKE special characters like '_' or '%'."
  },
  "$DB->sql_concat": {
    "prefix": "$DB->sql_concat",
    "body": "\\$DB->sql_concat();",
    "description": "Returns the proper SQL to do CONCAT between the elements(fieldnames) passed."
  },
  "$DB->sql_concat_join": {
    "prefix": "$DB->sql_concat_join",
    "body": "\\$DB->sql_concat_join(${1:${2:\\$separator}${3:, ${4:\\$elements}}});",
    "description": "Returns the proper SQL to do CONCAT between the elements passed with a given separator"
  },
  "$DB->sql_fullname": {
    "prefix": "$DB->sql_fullname",
    "body": "\\$DB->sql_fullname(${1:${2:\\$first}${3:, ${4:\\$last}}});",
    "description": "Returns the proper SQL (for the dbms in use) to concatenate $firstname and $lastname"
  },
  "$DB->sql_order_by_text": {
    "prefix": "$DB->sql_order_by_text",
    "body": "\\$DB->sql_order_by_text(${1:\\$fieldname}${2:, ${3:\\$numchars}});",
    "description": "Returns the SQL text to be used to order by one TEXT (clob) column, because some RDBMS doesn't support direct ordering of such fields."
  },
  "$DB->sql_length": {
    "prefix": "$DB->sql_length",
    "body": "\\$DB->sql_length(${1:\\$fieldname});",
    "description": "Returns the SQL text to be used to calculate the length in characters of one expression."
  },
  "$DB->sql_substr": {
    "prefix": "$DB->sql_substr",
    "body": "\\$DB->sql_substr(${1:\\$expr}, ${2:\\$start}${3:, ${4:\\$length}});",
    "description": "Returns the proper substr() SQL text used to extract substrings from DB this was originally returning only function name"
  },
  "$DB->sql_position": {
    "prefix": "$DB->sql_position",
    "body": "\\$DB->sql_position(${1:\\$needle}, ${2:\\$haystack});",
    "description": "Returns the SQL for returning searching one string for the location of another."
  },
  "$DB->sql_empty": {
    "prefix": "$DB->sql_empty",
    "body": "\\$DB->sql_empty();",
    "description": "DEPRECATED USE BOUND PARAMETER WITH EMPTY STRING INSTEAD. This used to return empty string replacement character."
  },
  "$DB->sql_isempty": {
    "prefix": "$DB->sql_isempty",
    "body": "\\$DB->sql_isempty(${1:\\$tablename}, ${2:\\$fieldname}, ${3:\\$nullablefield}, ${4:\\$textfield});",
    "description": "Returns the proper SQL to know if one field is empty."
  },
  "$DB->sql_isnotempty": {
    "prefix": "$DB->sql_isnotempty",
    "body": "\\$DB->sql_isnotempty(${1:\\$tablename}, ${2:\\$fieldname}, ${3:\\$nullablefield}, ${4:\\$textfield});",
    "description": "Returns the proper SQL to know if one field is not empty."
  },
  "$DB->sql_regex_supported": {
    "prefix": "$DB->sql_regex_supported",
    "body": "\\$DB->sql_regex_supported();",
    "description": "Returns true if this database driver supports regex syntax when searching."
  },
  "$DB->sql_regex": {
    "prefix": "$DB->sql_regex",
    "body": "\\$DB->sql_regex(${1:${2:\\$positivematch}${3:, ${4:\\$casesensitive}}});",
    "description": "Returns the driver specific syntax (SQL part) for matching regex positively or negatively (inverted matching). Eg: 'REGEXP':'NOT REGEXP' or '~*' : '!~*'"
  },
  "$DB->sql_intersect": {
    "prefix": "$DB->sql_intersect",
    "body": "\\$DB->sql_intersect(${1:\\$selects}, ${2:\\$fields});",
    "description": "Returns the SQL that allows to find intersection of two or more queries"
  },
  "$DB->replace_all_text_supported": {
    "prefix": "$DB->replace_all_text_supported",
    "body": "\\$DB->replace_all_text_supported();",
    "description": "Does this driver support tool_replace?"
  },
  "$DB->replace_all_text": {
    "prefix": "$DB->replace_all_text",
    "body": "\\$DB->replace_all_text(${1:\\$table}, ${2:\\$database_column_info}, ${3:\\$search}, ${4:\\$replace});",
    "description": "Replace given text in all rows of column."
  },
  "$DB->update_temp_table_stats": {
    "prefix": "$DB->update_temp_table_stats",
    "body": "\\$DB->update_temp_table_stats();",
    "description": "Analyze the data in temporary tables to force statistics collection after bulk data loads."
  },
  "$DB->is_transaction_started": {
    "prefix": "$DB->is_transaction_started",
    "body": "\\$DB->is_transaction_started();",
    "description": "Returns true if a transaction is in progress."
  },
  "$DB->transactions_forbidden": {
    "prefix": "$DB->transactions_forbidden",
    "body": "\\$DB->transactions_forbidden();",
    "description": "This is a test that throws an exception if transaction in progress. This test does not force rollback of active transactions."
  },
  "$DB->start_delegated_transaction": {
    "prefix": "$DB->start_delegated_transaction",
    "body": "\\$DB->start_delegated_transaction();",
    "description": "On DBs that support it, switch to transaction mode and begin a transaction you'll need to ensure you call allow_commit() on the returned object or your changes *will* be lost."
  },
  "$DB->commit_delegated_transaction": {
    "prefix": "$DB->commit_delegated_transaction",
    "body": "\\$DB->commit_delegated_transaction(${1:\\$moodle_transaction});",
    "description": "Indicates delegated transaction finished successfully. The real database transaction is committed only if all delegated transactions committed."
  },
  "$DB->rollback_delegated_transaction": {
    "prefix": "$DB->rollback_delegated_transaction",
    "body": "\\$DB->rollback_delegated_transaction(${1:\\$moodle_transaction}, ${2:\\$exception});",
    "description": "Call when delegated transaction failed, this rolls back all delegated transactions up to the top most level."
  },
  "$DB->force_transaction_rollback": {
    "prefix": "$DB->force_transaction_rollback",
    "body": "\\$DB->force_transaction_rollback();",
    "description": "Force rollback of all delegated transaction. Does not throw any exceptions and does not log anything."
  },
  "$DB->session_lock_supported": {
    "prefix": "$DB->session_lock_supported",
    "body": "\\$DB->session_lock_supported();",
    "description": "Is session lock supported in this driver?"
  },
  "$DB->get_session_lock": {
    "prefix": "$DB->get_session_lock",
    "body": "\\$DB->get_session_lock(${1:\\$rowid}, ${2:\\$timeout});",
    "description": "Obtains the session lock."
  },
  "$DB->release_session_lock": {
    "prefix": "$DB->release_session_lock",
    "body": "\\$DB->release_session_lock(${1:\\$rowid});",
    "description": "Releases the session lock."
  },
  "$DB->perf_get_reads": {
    "prefix": "$DB->perf_get_reads",
    "body": "\\$DB->perf_get_reads();",
    "description": "Returns the number of reads done by this database."
  },
  "$DB->perf_get_writes": {
    "prefix": "$DB->perf_get_writes",
    "body": "\\$DB->perf_get_writes();",
    "description": "Returns the number of writes done by this database."
  },
  "$DB->perf_get_queries": {
    "prefix": "$DB->perf_get_queries",
    "body": "\\$DB->perf_get_queries();",
    "description": "Returns the number of queries done by this database."
  },
  "$DB->perf_get_queries_time": {
    "prefix": "$DB->perf_get_queries_time",
    "body": "\\$DB->perf_get_queries_time();",
    "description": "Time waiting for the database engine to finish running all queries."
  }
}
